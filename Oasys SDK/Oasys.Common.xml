<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Oasys.Common</name>
  </assembly>
  <members>
    <member name="T:Oasys.Common.Enums.GameEnums.CastType">
      <summary>
            Indicates how a spell can be casted
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.EnemyChampions">
      <summary>
            The spell can be casted on an enemy champion
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.EnemyMinions">
      <summary>
            The spell can be casted on an enemy minion
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.EnemyTurrets">
      <summary>
            The spell can be casted on an enemy tower
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.AllyChampions">
      <summary>
            The spell can be casted on an ally champion
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.AllyMinions">
      <summary>
            The spell can be casted on an ally minion
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.AllyTurrets">
      <summary>
            The spell can be casted on an ally turret
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.HeroPets">
      <summary>
            The spell can be casted only on pets.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.Position">
      <summary>
            The spell can be casted on a position
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.Direction">
      <summary>
            The spell can be casted in a direction
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.Self">
      <summary>
            The spell can be casted on self
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.Charging">
      <summary>
            The spell is a charging spell
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.Toggle">
      <summary>
            The spell is a toggleable spell
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.Channel">
      <summary>
            The spell is a channel
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.Activate">
      <summary>
            The spell is activable
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.CastType.ImpossibleToCast">
      <summary>
            The spell can't be casted
            </summary>
    </member>
    <member name="T:Oasys.Common.Enums.GameEnums.GapcloserType">
      <summary>
        <c>Gapcloser</c> Spell Type
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.GapcloserType.Skillshot">
      <summary>
        <c>Skillshot</c> Spell
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.GapcloserType.Targeted">
      <summary>
                Targeted Spell
            </summary>
    </member>
    <member name="T:Oasys.Common.Enums.GameEnums.SkillshotType">
      <summary>
        <c>Skillshot</c> Type Enumeration
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SkillshotType.SkillshotLine">
      <summary>
                Determines that the <c>skillshot</c> is a linear <c>skillshot</c>.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SkillshotType.SkillshotCircle">
      <summary>
                Determines that the <c>skillshot</c> is a circle <c>skillshot</c>.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SkillshotType.SkillshotCone">
      <summary>
                Determines that the <c>skillshot</c> is a cone <c>skillshot</c>.
            </summary>
    </member>
    <member name="T:Oasys.Common.Enums.GameEnums.SpellTags">
      <summary>
                Properties that a spell can have
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Damage">
      <summary>
                The spell deals damage
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.AoE">
      <summary>
                The spell's effects are AoE
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.AppliesOnHitEffects">
      <summary>
                The spell applies on-hit effects.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.CrowdControl">
      <summary>
                The spell applies CC
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Shield">
      <summary>
                The spell applies a shield on the target
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Heal">
      <summary>
                The spell can heal
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Stasis">
      <summary>
                The spell makes the target enter a stasis state (invulnerable)
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.LeavesMark">
      <summary>
                The spell leaves a mark than can subsequently be proc'd to deal additional damage
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.CanDetonateMark">
      <summary>
                The spell can detonate a previously left mark.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Transformation">
      <summary>
                The spell modifies the champion's other spells (nida/jayce/elise ult)
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Dash">
      <summary>
                The spell is a dash
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Blink">
      <summary>
                The spell is a blink
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Teleport">
      <summary>
                The spell teleports the champion
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.DamageAmplifier">
      <summary>
                The spell amplifies the damage dealt by attacks or spells
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.DefensiveBuff">
      <summary>
                The spell increases health/armor/mr
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.MovementSpeedAmplifier">
      <summary>
                The spell increases the target's movement speed
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.AttackSpeedAmplifier">
      <summary>
                The spell increases the target's Attack Speed
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.AttackRangeModifier">
      <summary>
                The spell increases the target's Attack Range
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.SpellShield">
      <summary>
                The spell applies a spellshield
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.RemoveCrowdControl">
      <summary>
                The spell removes all CC from target
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.GrantsVision">
      <summary>
                The spell grants vision of the target area.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.SpellTags.Interruptable">
      <summary>
                The spell can be interrupted
            </summary>
    </member>
    <member name="T:Oasys.Common.Enums.GameEnums.TurretType">
      <summary>
                The turret type.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.TurretType.Unknown">
      <summary>
                The unknown tier.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.TurretType.TierOne">
      <summary>
                The tier one.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.TurretType.TierTwo">
      <summary>
                The tier two.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.TurretType.TierThree">
      <summary>
                The tier three.
            </summary>
    </member>
    <member name="F:Oasys.Common.Enums.GameEnums.TurretType.TierFour">
      <summary>
                The tier four.
            </summary>
    </member>
    <member name="T:Oasys.Common.Extensions.Extensions">
      <summary>
                Enumerable Extensions.
            </summary>
      <summary>
                Provides helpful extensions to Units.
            </summary>
      <summary>
                SharpDX/Vector2 Extensions.
            </summary>
      <summary>
                SharpDX/Vector3 Extensions
            </summary>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ClearFlags``1(``0,``0)">
      <summary>
                Clears all given flags from a specific struct source.
            </summary>
      <typeparam name="T">
                Flag with Attributes type.
            </typeparam>
      <param name="value">
                The enumeration
            </param>
      <param name="flags">
                Flags to be cleared
            </param>
      <returns>
                Enumeration with Flag Attributes (struct)
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.CombineFlags``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                Combines flags from an enumerable list to a new given struct source.
            </summary>
      <typeparam name="T">Flag with Attributes type.</typeparam>
      <param name="flags">The flags</param>
      <returns>Enumeration with Flag Attributes (struct)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
                Finds match in a container of values.
            </summary>
      <typeparam name="TSource">
                Given source
            </typeparam>
      <param name="source">
                List of all the values
            </param>
      <param name="match">
                Method that determines whether the specified object meets the criteria
            </param>
      <returns>
                Matches based on the predicate
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
                Does an action over a list of types.
            </summary>
      <typeparam name="T">Type of value</typeparam>
      <param name="list">List of values</param>
      <param name="action">Function to call foreach value</param>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetCombinations(System.Collections.Generic.IReadOnlyCollection{SharpDX.Vector2})">
      <summary>
                Returns all the subgroup combinations that can be made from a group
            </summary>
      <param name="allValues">List of <see cref="T:SharpDX.Vector2" /></param>
      <returns>Double list of vectors.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetFlagDescription``1(``0)">
      <summary>
                Gets a flag attribute description.
            </summary>
      <typeparam name="T">Flag with Attributes type.</typeparam>
      <param name="value">The enumeration</param>
      <returns>Enumeration with Flag Attributes (struct)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetFlags``1(``0)">
      <summary>
                Retrieves all of the flags from a specific struct source.
            </summary>
      <typeparam name="T">Flag with Attributes type.</typeparam>
      <param name="value">The enumeration</param>
      <returns>Enumeration with Flag Attributes (struct)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.In``1(``0,``0[])">
      <summary>
                Determines if a list contains any of the values.
            </summary>
      <param name="source">Container of objects</param>
      <param name="list">Any object that should be in the container</param>
      <typeparam name="T">Type of object to look for</typeparam>
      <returns>If the container contains any values.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Log(System.Exception)">
      <summary>
                Logs an exception to the console and a file.
            </summary>
      <param name="exception">Exception to log.</param>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                Gets the maximum value of an IEnumerable by the comparer, or returns the default.
            </summary>
      <param name="container">Container of values to search through</param>
      <param name="comparer">Function to compare values</param>
      <typeparam name="T">Type of object</typeparam>
      <typeparam name="TR">Type result of comparer</typeparam>
      <returns>The maximums of the objects</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                Gets the minimum value of an IEnumerable by the comparer, or returns the default.
            </summary>
      <typeparam name="T">Type of object</typeparam>
      <typeparam name="TR">Type result of comparer</typeparam>
      <param name="container">Container of values to search through</param>
      <param name="comparer">Function to compare the values</param>
      <returns>The minimum of the objects</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.SetFlags``1(``0,``0,System.Boolean)">
      <summary>
                Sets the given flags to the struct source, given struct must be an enumeration with flag attributes.
            </summary>
      <typeparam name="T">Flag with Attributes type.</typeparam>
      <param name="value">The enumeration</param>
      <param name="flags">The flags to be set</param>
      <param name="status">Turn flags on or off</param>
      <returns>Enumeration with Flag Attributes (struct)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
                Standard Deviation of the values list.
            </summary>
      <param name="values">Values list</param>
      <returns>Standard Deviation</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.To``1(System.IConvertible)">
      <summary>
                Converts an item to another Type
            </summary>
      <typeparam name="T">Type to convert to</typeparam>
      <param name="object">The object to convert to</param>
      <returns>The converted object</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(Oasys.Common.GameObject.GameObjectBase,Oasys.Common.GameObject.GameObjectBase)">
      <summary>
                Gets the distance between two GameObjects
            </summary>
      <param name="source">The Source</param>
      <param name="target">The Target</param>
      <returns>The distance between the two objects</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector3)">
      <summary>
                Gets the distance between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector3" /></summary>
      <param name="source">The Source</param>
      <param name="position">The Position</param>
      <returns>The distance between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector3" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector2)">
      <summary>
                Gets the distance between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector2" /></summary>
      <param name="source">The Source</param>
      <param name="position">The Position</param>
      <returns>The distance between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector2" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(Oasys.Common.GameObject.GameObjectBase,Oasys.Common.GameObject.GameObjectBase)">
      <summary>
                Gets the distance squared between two GameObjects
            </summary>
      <param name="source">The Source</param>
      <param name="target">The Target</param>
      <returns>The squared distance between the two objects</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector3)">
      <summary>
                Gets the distance squared between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector3" /></summary>
      <param name="source">The Source</param>
      <param name="position">The Position</param>
      <returns>The distance squared between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector3" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector2)">
      <summary>
                Gets the distance squared between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector2" /></summary>
      <param name="source">The Source</param>
      <param name="position">The Position</param>
      <returns>The distance squared between a <see cref="N:Oasys.Common.GameObject" /> and a <see cref="T:SharpDX.Vector2" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceToPlayer(Oasys.Common.GameObject.GameObjectBase)">
      <summary>
                Gets the distance between <c>Obj_AI_Base</c> source and Player
            </summary>
      <param name="source">The Source</param>
      <returns>The distance between a <see cref="!:Obj_AI_Base" /> and the Player</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceToPlayer(SharpDX.Vector3)">
      <summary>
                Gets the distance between the point and the Player
            </summary>
      <param name="position">The Position</param>
      <returns>The distance between the position and the Player</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceToPlayer(SharpDX.Vector2)">
      <summary>
                Gets the distance between the point and the Player
            </summary>
      <param name="position">The Position</param>
      <returns>The distance between the position and the Player</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetRecallTime(Oasys.Common.GameObject.Clients.AIHeroClient)">
      <summary>
                Returns the recall time duration for a specified <see cref="T:Oasys.Common.GameObject.Clients.AIHeroClient" /></summary>
      <param name="hero">The Hero</param>
      <returns>Recall Time Duration</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetRecallTime(System.String)">
      <summary>
                Returns the recall time duration for a specific recall type by name.
            </summary>
      <param name="recallName">Recall type name</param>
      <returns>Recall Time Duration</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetTurretType(Oasys.Common.GameObject.ObjectClass.Turret)">
      <summary>
                Gets the turret tier type.
            </summary>
      <param name="turret">
                The turret.
            </param>
      <returns>
                The <see cref="T:Oasys.Common.Enums.GameEnums.TurretType" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsBothFacing(Oasys.Common.GameObject.GameObjectBase,Oasys.Common.GameObject.GameObjectBase)">
      <summary>
                Calculates if the source and the target are facing each-other.
            </summary>
      <param name="source">Extended source</param>
      <param name="target">The Target</param>
      <returns>Returns if the source and target are facing each-other (boolean)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsFacing(Oasys.Common.GameObject.GameObjectBase,Oasys.Common.GameObject.GameObjectBase)">
      <summary>
                Calculates if the source is facing the target.
            </summary>
      <param name="source">Extended source</param>
      <param name="target">The Target</param>
      <returns>Returns if the source is facing the target (boolean)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsMelee(Oasys.Common.GameObject.GameObjectBase)">
      <summary>
                Return whether the specific unit is melee
            </summary>
      <param name="unit">Extended unit</param>
      <returns>Returns if the unit is melee</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsRecalling(Oasys.Common.GameObject.Clients.AIHeroClient)">
      <summary>
                Returns if the unit is recalling.
            </summary>
      <param name="unit">Extended unit</param>
      <returns>Returns if the unit is recalling (boolean)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsValidTarget(Oasys.Common.GameObject.GameObjectBase,System.Single,System.Boolean,SharpDX.Vector3)">
      <summary>
                Checks if the target unit is valid.
            </summary>
      <param name="unit">
                The Unit
            </param>
      <param name="range">
                The Range
            </param>
      <param name="checkTeam">
                Checks if the target is an enemy from the Player's side
            </param>
      <param name="from">
                Check From
            </param>
      <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.AngleBetween(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the angle between two vectors.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="toVector2">SharpDX Vector2</param>
      <returns>Angle between two vectors in float-units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.AngleBetween(SharpDX.Vector2,SharpDX.Vector3)">
      <summary>
                Returns the angle between two vectors.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="toVector3">SharpDX Vector3</param>
      <returns>Angle between two vectors in float-units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.CircleCircleIntersection(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Returns the two intersection points between two circles.
            </summary>
      <param name="center1">Center of Circle 1</param>
      <param name="center2">Center of Circle 2</param>
      <param name="radius1">Circle 1 Radius</param>
      <param name="radius2">Circle 2 Radius</param>
      <returns>Array of <see cref="T:SharpDX.Vector2" /> that contains the intersection points.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Closest(SharpDX.Vector2,System.Collections.Generic.IEnumerable{SharpDX.Vector2})">
      <summary>
                Seeks for the closest Vector2 to the extended Vector2.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="array">Vector2 Collection</param>
      <returns>Closest Vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Closest(SharpDX.Vector2,System.Collections.Generic.IEnumerable{SharpDX.Vector3})">
      <summary>
                Seeks for the closest Vector3 to the extended Vector2.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="array">Vector3 Collection</param>
      <returns>Closest Vector3</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.CrossProduct(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the cross product Z value.
            </summary>
      <param name="self">
                The self Vector2.
            </param>
      <param name="other">
                The other Vector2.
            </param>
      <returns>
                The <see cref="T:System.Single" /> cross product.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Calculates the distance between the extended Vector2 and a Vector2.
            </summary>
      <param name="vector2">SharpDX Vector2 (From)</param>
      <param name="toVector2">SharpDX Vector2 (To)</param>
      <returns>Float Units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(SharpDX.Vector2,SharpDX.Vector3)">
      <summary>
                Calculates the distance between the extended Vector2 and a Vector3.
            </summary>
      <param name="vector2">SharpDX Vector2 (From)</param>
      <param name="toVector3">SharpDX Vector3 (To)</param>
      <returns>Float Units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean)">
      <summary>
                Returns the distance to the line segment.
            </summary>
      <param name="point">Extended SharpDX Vector2</param>
      <param name="segmentStart">Vector2 Segment Start</param>
      <param name="segmentEnd">Vector2 Segment End</param>
      <param name="onlyIfOnSegment">Only if Segment</param>
      <returns>The distance between the point and the segment.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Calculates the squared distance between two vectors.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="toVector2">SharpDX Vector2</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(SharpDX.Vector2,SharpDX.Vector3)">
      <summary>
                Calculates the squared distance between two vectors.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="toVector3">SharpDX Vector3</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean)">
      <summary>
                Returns the squared distance to the line segment.
            </summary>
      <param name="point">Extended SharpDX Vector2</param>
      <param name="segmentStart">Vector2 Segment Start</param>
      <param name="segmentEnd">Vector2 Segment End</param>
      <param name="onlyIfOnSegment">Only if Segment</param>
      <returns>The squared distance between the point and the segment.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Extend(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Extends a Vector2 to another Vector2.
            </summary>
      <param name="vector2">Extended SharpDX Vector2 (From)</param>
      <param name="toVector2">SharpDX Vector2 (To)</param>
      <param name="distance">Distance (float units)</param>
      <returns>Extended Vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Extend(SharpDX.Vector2,SharpDX.Vector3,System.Single)">
      <summary>
                Extends a Vector2 to a Vector3.
            </summary>
      <param name="vector2">Extended SharpDX Vector2 (From)</param>
      <param name="toVector3">SharpDX Vector3 (To)</param>
      <param name="distance">Distance (float units)</param>
      <returns>Extended Vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Extend(SharpDX.Vector3,Oasys.Common.GameObject.GameObjectBase,System.Single)">
      <summary> 
            Returns a position that runs from the source position to the targets position with the length of the range specified.
            </summary>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Extend(SharpDX.Vector2,Oasys.Common.GameObject.GameObjectBase,System.Single)">
      <summary> 
            Returns a position that runs from the source position to the targets position with the length of the range specified.
            </summary>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Shorten(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Shortens the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to shorten from.</param>
      <param name="distance">The distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetPathLength(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Gets the total distance of a list of vectors.
            </summary>
      <param name="path">The path</param>
      <returns>Total distance of the path</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Intersection(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Intersects two line segments.
            </summary>
      <param name="lineSegment1Start">Line Segment 1 (Start)</param>
      <param name="lineSegment1End">Line Segment 1 (End)</param>
      <param name="lineSegment2Start">Line Segment 2 (Start)&gt;</param>
      <param name="lineSegment2End">Line Segment 2 (End)</param>
      <returns>The intersection result, <seealso cref="T:Oasys.Common.Extensions.IntersectionResult" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsOrthogonal(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns if the angle is orthogonal.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="toVector2">SharpDX Vector2</param>
      <returns>The <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsOrthogonal(SharpDX.Vector2,SharpDX.Vector3)">
      <summary>
                Returns if the angle is orthogonal.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="toVector3">SharpDX Vector3</param>
      <returns>The <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsUnderRectangle(SharpDX.Vector2,System.Single,System.Single,System.Single,System.Single)">
      <summary>
                Returns true if the point is under the rectangle
            </summary>
      <param name="point">
                Extended SharpDX Vector2
            </param>
      <param name="x">
                Rectangle X-axis
            </param>
      <param name="y">
                Rectangle Y-axis
            </param>
      <param name="width">
                Rectangle width
            </param>
      <param name="height">
                Rectangle height
            </param>
      <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsValid(SharpDX.Vector2)">
      <summary>
                Checks for if the extended Vector2 is valid.
            </summary>
      <param name="vector2">SharpDX Vector2</param>
      <returns>The <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Magnitude(SharpDX.Vector2)">
      <summary>
                Returns the calculated magnitude of the given Vector2.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <returns>Magnitude in float-units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Normalized(SharpDX.Vector2)">
      <summary>
                Normalizes a Vector2.
            </summary>
      <param name="vector2">SharpDX Vector2</param>
      <returns>Normalized Vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.PathLength(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Returns the total distance of a path.
            </summary>
      <param name="path">
                The path.
            </param>
      <returns>
                The <see cref="T:System.Single" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Perpendicular(SharpDX.Vector2,System.Int32)">
      <summary>
                Returns the Perpendicular Vector2 to the Extended Vector2.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="offset">Axis Offset (0 = X, 1 = Y)</param>
      <returns>Perpendicular Vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Polar(SharpDX.Vector2)">
      <summary>
                Returns the polar for vector angle (in Degrees).
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <returns>Polar for Vector Angle (Degrees)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ProjectOn(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the projection of the Vector2 on the segment.
            </summary>
      <param name="point">The Point</param>
      <param name="segmentStart">Start of Segment</param>
      <param name="segmentEnd">End of Segment</param>
      <returns>
        <see cref="T:Oasys.Common.Extensions.ProjectionInfo" /> containing the projection.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Rotated(SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the Vector2 to a set angle.
            </summary>
      <param name="vector2">Extended SharpDX Vector2</param>
      <param name="angle">Angle (in radians)</param>
      <returns>Rotated Vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToVector4(SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Transforms an extended Vector2 into a Vector4.
            </summary>
      <param name="vector2">SharpDX Vector2</param>
      <param name="z">Float Z-axis (default = 0f)</param>
      <param name="w">Float W-axis (default = 0f)</param>
      <returns>The <see cref="T:SharpDX.Vector4" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToVector4(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Transforms an extended Vector2 List into a Vector4 List.
            </summary>
      <param name="path">
                The path.
            </param>
      <returns>
                Vector4 List
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.VectorMovementCollision(SharpDX.Vector2,SharpDX.Vector2,System.Single,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Calculates movement collision between two vectors points.
            </summary>
      <param name="pointStartA">
                Point A Start.
            </param>
      <param name="pointEndA">
                Point A End.
            </param>
      <param name="pointVelocityA">
                Point A Velocity.
            </param>
      <param name="pointB">
                Point B.
            </param>
      <param name="pointVelocityB">
                Point B Velocity.
            </param>
      <param name="delay">
                Additional Delay.
            </param>
      <returns>
                The <see cref="T:Oasys.Common.Extensions.MovementCollisionInfo" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.VectorMovementCollision(SharpDX.Vector2[],System.Single,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Calculates movement collision between two vectors points.
            </summary>
      <param name="pointA">
                Point A.
            </param>
      <param name="pointVelocityA">
                Point A Velocity.
            </param>
      <param name="pointB">
                Point B.
            </param>
      <param name="pointVelocityB">
                Point B Velocity.
            </param>
      <param name="delay">
                Additional Delay.
            </param>
      <returns>
                The <see cref="T:Oasys.Common.Extensions.MovementCollisionInfo" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.AngleBetween(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Returns the angle between two vectors.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="toVector3">SharpDX Vector3</param>
      <returns>Angle between two vectors in float-units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.AngleBetween(SharpDX.Vector3,SharpDX.Vector2)">
      <summary>
                Returns the angle between two vectors.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="toVector2">SharpDX Vector2</param>
      <returns>Angle between two vectors in float-units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Closest(SharpDX.Vector3,System.Collections.Generic.IEnumerable{SharpDX.Vector3})">
      <summary>
                Seeks for the closest Vector3 to the extended Vector3.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="array">Vector3 Collection</param>
      <returns>Closest Vector3</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Closest(SharpDX.Vector3,System.Collections.Generic.IEnumerable{SharpDX.Vector2})">
      <summary>
                Seeks for the closest Vector2 to the extended Vector3.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="array">Vector2 Collection</param>
      <returns>Closest Vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Calculates the distance between the extended Vector3 and a Vector3.
            </summary>
      <param name="vector3">SharpDX Vector3 (From)</param>
      <param name="toVector3">SharpDX Vector3 (To)</param>
      <returns>Float Units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Distance(SharpDX.Vector3,SharpDX.Vector2)">
      <summary>
                Calculates the distance between the extended Vector3 and a Vector3.
            </summary>
      <param name="vector3">SharpDX Vector3 (From)</param>
      <param name="toVector2">SharpDX Vector2 (To)</param>
      <returns>Float Units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Calculates the squared distance between two vectors.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="toVector3">SharpDX Vector3</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.DistanceSquared(SharpDX.Vector3,SharpDX.Vector2)">
      <summary>
                Calculates the squared distance between two vectors.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="toVector2">SharpDX Vector2</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Extend(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Extends a Vector3 to another Vector3.
            </summary>
      <param name="vector3">Extended SharpDX Vector3 (From)</param>
      <param name="toVector3">SharpDX Vector3 (To)</param>
      <param name="distance">Distance (float units)</param>
      <returns>Extended Vector3</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Extend(SharpDX.Vector3,SharpDX.Vector2,System.Single)">
      <summary>
                Extends a Vector3 to a Vector2.
            </summary>
      <param name="vector3">Extended SharpDX Vector3 (From)</param>
      <param name="toVector2">SharpDX Vector2 (To)</param>
      <param name="distance">Distance (float units)</param>
      <returns>Extended Vector3</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Shorten(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Shortens the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to shorten from.</param>
      <param name="distance">The distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToVector3(SharpDX.Vector2,System.Single)">
      <summary>
                Transforms an extended Vector2 into a Vector3.
            </summary>
      <param name="vector2">SharpDX Vector2</param>
      <param name="z">Float Z-axis (default = 0f)</param>
      <returns>The <see cref="T:SharpDX.Vector3" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.GetPathLength(System.Collections.Generic.List{SharpDX.Vector3})">
      <summary>
                Gets the total distance of a list of vectors.
            </summary>
      <param name="path">The path</param>
      <returns>Total distance of the path</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsOrthogonal(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Returns if the angle is orthogonal.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="toVector3">SharpDX Vector3</param>
      <returns>Returns if the angle is orthogonal</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsOrthogonal(SharpDX.Vector3,SharpDX.Vector2)">
      <summary>
                Returns if the angle is orthogonal.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="toVector2">SharpDX Vector2</param>
      <returns>Returns if the angle is orthogonal</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.IsValid(SharpDX.Vector3)">
      <summary>
                Checks for if the extended Vector3 is valid.
            </summary>
      <param name="vector3">
                SharpDX Vector3
            </param>
      <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Magnitude(SharpDX.Vector3)">
      <summary>
                Returns the calculated magnitude of the given Vector3.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <returns>Magnitude in float-units</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Normalized(SharpDX.Vector3)">
      <summary>
                Normalizes a Vector3.
            </summary>
      <param name="vector3">SharpDX Vector3</param>
      <returns>Normalized Vector3</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.PathLength(System.Collections.Generic.List{SharpDX.Vector3})">
      <summary>
                Returns the total distance of a path.
            </summary>
      <param name="path">
                The path.
            </param>
      <returns>
                The <see cref="T:System.Single" />.
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Perpendicular(SharpDX.Vector3,System.Int32)">
      <summary>
                Returns the Perpendicular Vector3 to the Extended Vector3.
            </summary>
      <param name="vector3">Extended SharpDX Vector3</param>
      <param name="offset">Axis Offset (0 = X, 1 = Y)</param>
      <returns>Perpendicular Vector3</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Polar(SharpDX.Vector3)">
      <summary>
                Returns the polar for vector angle (in Degrees).
            </summary>
      <param name="vector3">Extended SharpDX Vector2</param>
      <returns>Polar for Vector Angle (Degrees)</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ProjectOn(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Converts the points to 2D, then returns the projection of the Vector2 on the segment.
            </summary>
      <param name="point">The point</param>
      <param name="segmentStart">Start of Segment</param>
      <param name="segmentEnd">End of Segment</param>
      <returns>
        <see cref="T:Oasys.Common.Extensions.ProjectionInfo" /> containing the projection.</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.Rotated(SharpDX.Vector3,System.Single)">
      <summary>
                Rotates the Vector3 to a set angle.
            </summary>
      <param name="vector3">Extended SharpDX Vector2</param>
      <param name="angle">Angle (in radians)</param>
      <returns>Rotated Vector3</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToVector2(SharpDX.Vector3)">
      <summary>
                Transforms an extended Vector3 into a Vector2.
            </summary>
      <param name="vector3">SharpDX Vector3</param>
      <returns>The <see cref="T:SharpDX.Vector2" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToVector2(System.Collections.Generic.List{SharpDX.Vector3})">
      <summary>
                Transforms an extended Vector3 List into a Vector2 List.
            </summary>
      <param name="path">
                The path.
            </param>
      <returns>
                Vector2 List
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToVector4(SharpDX.Vector3,System.Single)">
      <summary>
                Transforms an extended Vector3 into a Vector4.
            </summary>
      <param name="vector3">SharpDX Vector3</param>
      <param name="w">Float W-axis (default = 0f)</param>
      <returns>The <see cref="T:SharpDX.Vector4" /></returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToVector4(System.Collections.Generic.List{SharpDX.Vector3})">
      <summary>
                Transforms an extended Vector3 List into a Vector4 List.
            </summary>
      <param name="path">
                The path.
            </param>
      <returns>
                Vector4 List
            </returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToW2S(SharpDX.Vector3)">
      <summary>
            Convert vector3 position to world to screen position as vector2.
            </summary>
      <param name="sourceVector3">Vector3 position</param>
      <returns>World to screen position as vector2</returns>
    </member>
    <member name="M:Oasys.Common.Extensions.Extensions.ToWorldToMap(SharpDX.Vector3)">
      <summary>
            Get minimap position on screen.
            </summary>
      <param name="vector3">The world position to calculate.</param>
      <returns>The map position.</returns>
    </member>
    <member name="T:Oasys.Common.Extensions.ProjectionInfo">
      <summary>
                Holds info for the ProjectOn method.
            </summary>
    </member>
    <member name="F:Oasys.Common.Extensions.ProjectionInfo.IsOnSegment">
      <summary>
                Returns if the point is on the segment
            </summary>
    </member>
    <member name="F:Oasys.Common.Extensions.ProjectionInfo.LinePoint">
      <summary>
                Line point
            </summary>
    </member>
    <member name="F:Oasys.Common.Extensions.ProjectionInfo.SegmentPoint">
      <summary>
                Segment point
            </summary>
    </member>
    <member name="T:Oasys.Common.Extensions.MovementCollisionInfo">
      <summary>
                Holds info for the VectorMovementCollision method.
            </summary>
    </member>
    <member name="F:Oasys.Common.Extensions.MovementCollisionInfo.CollisionPosition">
      <summary>
                Collision position.
            </summary>
    </member>
    <member name="F:Oasys.Common.Extensions.MovementCollisionInfo.CollisionTime">
      <summary>
                Collision Time from calculation.
            </summary>
    </member>
    <member name="P:Oasys.Common.Extensions.MovementCollisionInfo.Item(System.Int32)">
      <summary>
                Information accessor.
            </summary>
      <param name="i">
                The Indexer.
            </param>
      <returns>
                The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:Oasys.Common.Extensions.IntersectionResult">
      <summary>
                Holds info for the <see cref="M:Oasys.Common.Extensions.Extensions.Intersection(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)" /> method.
            </summary>
    </member>
    <member name="F:Oasys.Common.Extensions.IntersectionResult.Intersects">
      <summary>
                Returns if both of the points intersect.
            </summary>
    </member>
    <member name="F:Oasys.Common.Extensions.IntersectionResult.Point">
      <summary>
                Intersection point
            </summary>
    </member>
    <member name="M:Oasys.Common.Extensions.IntersectionResult.#ctor(System.Boolean,SharpDX.Vector2)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Extensions.IntersectionResult" /> struct.
                Constructor for Intersection Result
            </summary>
      <param name="intersects">
                Intersection of input
            </param>
      <param name="point">
                Intersection Point
            </param>
    </member>
    <member name="P:Oasys.Common.GameInstances.ChatClient.ChatBoxStartPos">
      <summary>
            Gets the X and Y origin Vector2 position of the chatbox. 
            </summary>
    </member>
    <member name="P:Oasys.Common.GameInstances.ChatClient.ChatBoxEndPos">
      <summary>
            Gets the X and Y corner Vector2 position of the chatbox.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameInstances.ChatClient.IsChatting">
      <summary>
            Checks whether if the user is typing in the chatbox.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameInstances.MinimapInfo.IsVisible">
      <summary>
            Checks whether if the minimap is visible.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameInstances.MinimapInfo.IsOnTheLeftSide">
      <summary>
            Checks whether if the minimap is on the left side of the screen.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameInstances.MinimapInfo.MinimapScreenPosition">
      <summary>
            Gets the minimap vector2 position on the screen.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameInstances.MinimapInfo.MinimapScreenSize">
      <summary>
            Gets the minimap vector2 size on the screen.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameInstances.MinimapInfo.MinimapMaxSizeable">
      <summary>
            Gets the minimap max sizeable vector2.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.AIBaseClient">
      <summary>
            Client specifically for all base objects.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.IsNativeObjectPointerValid">
      <summary>
            Checks whether if the object's native pointer in memory is valid. (Is NOT NullPtr)
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.AIManager">
      <summary>
            Gets the navigation manager.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.AIBaseClient.GetSpellBook">
      <summary>
            Gets the spellbook.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.AIBaseClient.GetAttackDelay">
      <summary>
            Gets the time delay between basic attacks.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.AIBaseClient.GetAttackCastDelay">
      <summary>
            Gets the time between cast animation and the actual cast of the basic attack.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.IsCastingSpell">
      <summary>
            Checks whether if it is casting a spell.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.AIBaseClient.GetCurrentCastingSpell">
      <summary>
            Gets the currently casting spell.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.BasicAttackInfo">
      <summary>
            Gets the information about the basic attack.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.EncryptedID">
      <summary>
            Gets the encryped server Object ID.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Index">
      <summary>
            Gets the index within the object manager.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Team">
      <summary>
            Gets the current team.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.BaseObjectTypesAssociated">
      <summary>
            Gets the base object types the object is associated with.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.AIBaseClient.IsTeam(Oasys.Common.Enums.GameEnums.TeamFlag)">
      <summary>
            Checks whether if it is on team flag given.
            </summary>
      <param name="tFlag">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Name">
      <summary>
            Gets the object's name. For player, it is their username.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.NetworkID">
      <summary>
            Gets the ID on the network stream.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Position">
      <summary>
            Gets the current position.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.HealthBarScreenPosition">
      <summary>
            Gets the position of the health on the screen.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.IsVisible">
      <summary>
            Checks whether if it is visible to the player's sight in-game.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.W2S">
      <summary>
            Get the transformed WorldToScreen position.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.WorldToMap">
      <summary>
            Gets the current position in map on screen.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Distance">
      <summary>
            Gets the distance between the player.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.AIBaseClient.DistanceTo(SharpDX.Vector3)">
      <summary>
            Gets the distance between the given vector3 in-game position.
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Mana">
      <summary>
            Gets the mana.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.MaxMana">
      <summary>
            Gets the max mana.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.IsTargetable">
      <summary>
            Checks whether if is targetable by the player.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Health">
      <summary>
            Gets the health.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Armor">
      <summary>
            Gets the armor.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.MagicResist">
      <summary>
            Gets the magic resist.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.IsAlive">
      <summary>
            Checks whether if it is alive.   /// </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.EffectiveArmorHealth">
      <summary>
            Gets the health with armor.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.EffectiveMagicHealth">
      <summary>
            Gets the health with magic resist.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.MaxHealth">
      <summary>
            Gets the max health.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.NeutralShield">
      <summary>
            Gets the amount of neutral shield applied.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.MagicalShield">
      <summary>
            Gets the amount of magical shield applied.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.PhysicalShield">
      <summary>
            Gets the amount of physical shields applied.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.AttackRange">
      <summary>
            Gets the attack range in 100th teemos.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.TrueAttackRange">
      <summary>
            Gets true attack range including bounding radius(hitbox radius) in 100th teemos.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.UnitStats">
      <summary>
            Gets the statistical information about the unit. Statistical values shown next to the champion icon at the bottom.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Gold">
      <summary>
            Gets the amount of gold it has.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Direction">
      <summary>
            Gets the direction it is facing towards/at.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.BuffManager">
      <summary>
            Gets the manager for the buffs.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.CombatType">
      <summary>
            Gets the combat type.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.AIBaseClient.IsCombatType(Oasys.Common.Enums.GameEnums.CombatTypes)">
      <summary>
            Checks whether if combat type matches the one given.
            </summary>
      <param name="CType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.UnitComponentInfo">
      <summary>
            Gets the unit's component information.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.ModelName">
      <summary>
            Gets the character model name. For champions, it is the champion name.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIBaseClient.Level">
      <summary>
            Gets the current level.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.AIHeroClient">
      <summary>
            Client specifically for Heroes.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIHeroClient.IsRecalling">
      <summary>
            Checks whether if the champion is recalling.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIHeroClient.IsEmpoweredRecalling">
      <summary>
            Checks whether if the champion is recalling.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIHeroClient.ExperiencePoints">
      <summary>
            Gets the curremt XP amount.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIHeroClient.SpellUpgradePoints">
      <summary>
            Gets the points in hand to upgrade spells.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.AIHeroClient.Inventory">
      <summary>
            Gets the item inventory.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.AIMinionClient">
      <summary>
            Client specifically for all minion objects.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.AIPlacementClient">
      <summary>
            Client specifically for all placeable objects.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager">
      <summary>
            Navigation manager.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.NavTargetPosition">
      <summary>
            Gets the position of where it is moving to. 
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.IsMoving">
      <summary>
            Checks whether if it is moving/walking.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.ProcessedNavPointCount">
      <summary>
            Gets the processed count of nav points.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.NavBeginPosition">
      <summary>
            Gets the beginning position of the navigation.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.DashSpeed">
      <summary>
            Gets the dashing speed.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.IsDashing">
      <summary>
            Checks whether if it is dashing.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.NavEndPosition">
      <summary>
            Gets the ending position of the navigation.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.ServerPosition">
      <summary>
            Gets the server position.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.Velocity">
      <summary>
            Gets the velocity.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.GetNavPoints">
      <summary>
            Gets the position of each navigation check points.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.AIManager.GetNavPointCount">
      <summary>
            Gets the total count of navigation check points.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.Name">
      <summary>
            Gets the name of the buff.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.OwnerObjectIndex">
      <summary>
            Gets the buff owner's object index.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.OwnerObjectNetworkID">
      <summary>
            Gets the buff owner's network ID;
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.GetOwnerObject">
      <summary>
            Gets the buff owner object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.StartTime">
      <summary>
            Gets the start time.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.EndTime">
      <summary>
            Gets the end time.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.BuffCountInt">
      <summary>
            Gets the buff count in int form.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.BuffCountAlt">
      <summary>
            Gets the alternate buff count. Second buff account.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.Stacks">
      <summary>
            Gets the buff stacks.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry.IsActive">
      <summary>
            Checks whether if the buff is active.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager">
      <summary>
            Object BuffManager instance.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.Buffs">
      <summary>
            Current buffs.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.ActiveBuffs">
      <summary>
            Current active buffs.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.FirstOrDefault(System.Func{Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry,System.Boolean})">
      <summary>
            Get the first or default buff entry based on the predicate.
            </summary>
      <param name="predicate">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.HasBuff(System.String)">
      <summary>
            Checks whether if it has buff with the name given.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.HasBuff(System.String,System.Boolean,System.Boolean)">
      <summary>
            Checks whether if it has buff with the name given.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.HasBuff(System.Func{Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry,System.Boolean})">
      <summary>
            Checks whether if it has buff with the true predicate given.
            </summary>
      <param name="predicate">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.HasActiveBuff(System.Func{Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry,System.Boolean})">
      <summary>
            Checks whether if it has an active buff with the true predicate given.
            </summary>
      <param name="predicate">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.GetBuff(System.Func{Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry,System.Boolean})">
      <summary>
            Gets the first buff or null that matches the predicate.
            </summary>
      <param name="predicate">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.GetActiveBuff(System.Func{Oasys.Common.GameObject.Clients.ExtendedInstances.BuffEntry,System.Boolean})">
      <summary>
            Gets the first active buff or null that matches the predicate.
            </summary>
      <param name="predicate">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.GetActiveBuff(System.String)">
      <summary>
            Gets a buff by the name given.
            </summary>
      <param name="buffName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.HasActiveBuff(System.String)">
      <summary>
            Checks whether if it has an active buff by the name given.
            </summary>
      <param name="buffName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.GetBuffByName(System.String,System.Boolean,System.Boolean)">
      <summary>
            Gets a buff by the name given.
            </summary>
      <param name="buffName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.BuffManager.GetBuffList">
      <summary>
            Gets all the buffs.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory">
      <summary>
            Heroes item inventory instance.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.GetItemByID(Oasys.Common.Enums.GameEnums.ItemID)">
      <summary>
            Gets an item by the ID given.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.HasItem(Oasys.Common.Enums.GameEnums.ItemID)">
      <summary>
            Checks whether if it has an item by the ID given.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.GetItemList">
      <summary>
            Gets the items in order from the item slots.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.OwnerHero">
      <summary>
            Gets the item owner hero.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.Name">
      <summary>
            Gets the name of the item.
            </summary>
    </member>
    <member name="F:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.ID">
      <summary>
            Gets the ID of the item.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.Slot">
      <summary>
            Gets the slot of the item.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.Charges">
      <summary>
            Gets the amount of charges the item has.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.Cost">
      <summary>
            Gets the item cost.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.Cooldown">
      <summary>
            Gets the item cooldown.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.CooldownExpiry">
      <summary>
            Gets the item cooldown expiry time.
            </summary>
    </member>
    <member name="F:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.CreatedInListGameTime">
      <summary>
            Gets the time when the item was created in the list.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.HeroInventory.Item.IsReady">
      <summary>
            Checks whether if the item is ready.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry">
      <summary>
            SpellCastInfo | SpellBook + 0x20 -&gt; ActiveSpellEntry
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.SpellData">
      <summary>
            Gets the data about the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.SpellSlot">
      <summary>
            Gets the slot in use.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.MissileIndex">
      <summary>
            Gets the index in the object manager.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.CasterName">
      <summary>
            Gets the caster's name.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.SpellStartPosition">
      <summary>
            Gets the start position of the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.SpellEndPosition">
      <summary>
            Gets the end position of the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.SpellCurrentPosition">
      <summary>
            Gets the current position of the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.WindupTime">
      <summary>
            Gets the animation time.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.Cooldown">
      <summary>
            Gets the cooldown.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.IsBasicAttack">
      <summary>
            Checks whether if it is a basic attack.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.IsSpecialAttack">
      <summary>
            Checks whether if it is a special attack.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.CastStartTime">
      <summary>
            Gets the spell cast start time.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellActiveEntry.CastEndTime">
      <summary>
            Gets the cast end time.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.IsSpellReady">
      <summary>
            Checks whether if the spell is ready.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.Level">
      <summary>
            Gets the spell level.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.Cooldown">
      <summary>
            Gets the spell cooldown.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.CooldownExpire">
      <summary>
            Gets the cooldown expiry.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.FinalCooldownExpire">
      <summary>
            [OBSOLETE - Use CooldownExpire, will be removed in upcoming updates] Gets the cooldown expiry.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.Charges">
      <summary>
            Gets the charges available.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.IsToggled">
      <summary>
            Is toggled. Fx: Amumu W, Karthus E, Etc...
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.IsActivated">
      <summary>
            Is activated. Fx: Jinx Q...
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClass.SpellData">
      <summary>
            Gets the data about the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MissileName">
      <summary>
            Gets the missile name. This is often the spell object's name.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellName">
      <summary>
            Gets the spell name. It is the official name of the spell provided by Riot.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellEffectDuration">
      <summary>
            Gets the duration of effect.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellEffectDurationTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellDuration">
      <summary>
            Gets the duration of the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellDurationTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellRadius">
      <summary>
            Gets the radius of the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellRadiusTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MaxAmmo">
      <summary>
            Gets the max ammo.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MaxAmmoTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.AmmoUsed">
      <summary>
            Gets the ammo used.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.AmmoRechargeTime">
      <summary>
            Gets the charging time of the ammos.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.AmmoRechargeTimeTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.CastRange">
      <summary>
            Gets the cast range.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.CastRangeTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellRange">
      <summary>
            Gets the spell range, the distance the spell is able to travel.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellRangeTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MissileSpeed">
      <summary>
            Gets the speed of the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MissileAcceleration">
      <summary>
            Gets the acceleration rate of the spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MissileMaxSpeed">
      <summary>
            Gets the spell's maximum speed of travel.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MissileMinSpeed">
      <summary>
            Gets the spell's minimum speed of travel.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.SpellWidth">
      <summary>
            Gets the spell's width. Will return 0 or value around 0 when it is not a line spell.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.CooldownTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.ResourceCost">
      <summary>
            Gets the cost of mana/fury/energy etc.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.ResourceCostTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MinBaseDamageTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.MaxBaseDamageTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.Spells.SpellClassData.TotalAttackDamageScalingTable">
      <summary>
            Key is spell level
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.SkinName">
      <summary>
            Gets the skin name.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.SkinID">
      <summary>
            Gets the skin ID.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitBaseMoveSpeed">
      <summary>
            Gets the unit's base movement speed.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitAttackRange">
      <summary>
            Gets the unit's attack range.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitBaseAttackSpeed">
      <summary>
            Gets the unit's base attack speed.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitBaseAttackSpeedAdditional">
      <summary>
            Gets the unit's additional base attack speed.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitMaxAttackSpeed">
      <summary>
            Gets the unit's max attack speed.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitBoundingRadius">
      <summary>
            Gets the unit's hitbox radius.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitMainClass">
      <summary>
            Gets the unit's main type class.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitComponentInfo.UnitSubClass">
      <summary>
            Gets the unit's sub type class.
            </summary>
    </member>
    <member name="T:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats">
      <summary>
            Object stats/properties instance.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.AbilityHaste">
      <summary>
            Gets the unit's ability haste.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.CooldownReductionPercent">
      <summary>
            Gets the unit's calculated cooldown reduction in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.TotalAbilityPower">
      <summary>
            Gets the unit's total ability power.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentCooldownMod">
      <summary>
            Gets the unit's basic attack cooldown modifier in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentCooldownCapMod">
      <summary>
            Gets the unit's basic attack cooldown cap/max modifier in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PassiveCooldownEndTime">
      <summary>
            Gets the unit's passive cooldown end time.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PassiveCooldownTotalTime">
      <summary>
            Gets the unit's total passive cooldown time
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.FlatPhysicalDamageMod">
      <summary>
            Gets the unit's base physical damage modifier.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentPhysicalDamageMod">
      <summary>
            Gets the unit's physical damage modifier in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.BonusAttackDamage">
      <summary>
            Gets the unit's bonus attack damage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.FlatMagicDamageMod">
      <summary>
            Gets the unit's magic damage modifier in int.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.TotalMagicDamage">
      <summary>
            Gets the unit's total magic damage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentMagicDamageMod">
      <summary>
            Gets the unit's magic damage modifier in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.FlatMagicReduction">
      <summary>
            Gets the unit's magic reduction in int.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentMagicReduction">
      <summary>
            Gets the unit's magic  reduction in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.FlatCastRangeMod">
      <summary>
            Gets the unit's attack cast range modifier.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.AttackSpeedMod">
      <summary>
            Gets the unit's attack speed modifier.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.TrueAttackSpeedMod">
      <summary>
            Gets the unit's true attack speed modifier.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.AttackSpeedModRaw">
      <summary>
            Gets the unit's true/raw attack speed modifier.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentAttackSpeedMod">
      <summary>
            GEts the unit's attack speed modifier in percentage scale.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.TotalAttackDamage">
      <summary>
            Gets the unit's total attack damage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.FlatBaseAttackDamageMod">
      <summary>
            Gets the unit's base attack damage modifier.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.BaseAttackDamageSansPercentScale">
      <summary>
            Gets the unit's base attack damage in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.BaseAttackDamage">
      <summary>
            Gets the unit's base attack damage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentBaseAttackDamageMod">
      <summary>
            Gets the unit's base attack damage modifier in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.BaseAbilityDamage">
      <summary>
            Gets the unit's base ability damage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.CritBonusPerc">
      <summary>
            Gets the unit's critical bonus in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.Crit">
      <summary>
            Gets the unit's critical.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.Armor">
      <summary>
            Gets the unit's armor.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.BonusArmor">
      <summary>
            Gets the unit's bonus armor.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.ArmorPercentPentration">
      <summary>
            Gets the unit's armor pentration in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.MagicResist">
      <summary>
            Gets the unit's magic resist.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.BonusMagicResist">
      <summary>
            Gets the unit's bonus magic resist.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.HPRegenRate">
      <summary>
            Gets the unit's health regeneration rate.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.BaseHPRegenRate">
      <summary>
            Gets the unit's base health regeneration rate.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.MoveSpeed">
      <summary>
            Gets the unit's movement speed.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.AttackRange">
      <summary>
            Gets the unit's attack range.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.FlatArmorPenetration">
      <summary>
            Gets the unit's armor penetration.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PhysicalLethality">
      <summary>
            Gets the unit's physical lethality.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentBonusArmorPenetration">
      <summary>
            Gets the unit's bonus armor penetration in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentCritBonusArmorPenetration">
      <summary>
            Gets the unit's critical bonus armor penetration in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentCritTotalArmorPenetration">
      <summary>
            Gets the unit's crtical total armor penetration in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.FlatMagicPenetration">
      <summary>
            Gets the unit's magic penetration.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentBonusMagicPenetration">
      <summary>
            Gets the unit's bonus magic penetration in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.MagicLethality">
      <summary>
            Gets the unit's magic lethality.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.MagicPercentPenetration">
      <summary>
            Gets the unit's magic penetration in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentLifeStealMod">
      <summary>
            Gets the unit's life steam modifier in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentSpellVampMod">
      <summary>
            Gets the unit's spell vamp modifier in percentage.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.Clients.ExtendedInstances.UnitStats.PercentCCReduction">
      <summary>
            Gets the unit's crowd control reduction in percentage.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.As``1">
      <summary>
            Creates a new instance of desired type derived from GameObjectBase
            </summary>
      <typeparam name="T">Desired type</typeparam>
      <returns>Object of desired type T</returns>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.IsObject(Oasys.Common.Enums.GameEnums.ObjectTypeFlag)">
      <summary>
            Checks whether if it is an object type given.
            </summary>
      <param name="oTF">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.IsMe">
      <summary>
            Checks whether if the champion is the player.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.PredictHealth(System.Int32)">
      <summary>
            Returns the unit health after a set time delay milliseconds. 
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.AttackSpeed">
      <summary>
            The attackspeed. Attacks per second. 1 / AttackDelay.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Armor">
      <summary>
            Gets the armor.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.MagicResist">
      <summary>
            Gets the magic resist.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Distance">
      <summary>
            Gets the distance between the player.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.IsVisible">
      <summary>
            Checks whether if it is visible to the player's sight in-game.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.IsAlive">
      <summary>
            Checks whether if it is alive.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.IsTargetable">
      <summary>
            Checks whether if is targetable by the player.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Health">
      <summary>
            Gets the health.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.EffectiveArmorHealth">
      <summary>
            Gets the health with armor.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.EffectiveMagicHealth">
      <summary>
            Gets the health with magic resist.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.MaxHealth">
      <summary>
            Gets the max health.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.NeutralShield">
      <summary>
            Gets the amount of neutral shield applied.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.MagicalShield">
      <summary>
            Gets the amount of magical shield applied.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.PhysicalShield">
      <summary>
            Gets the amount of physical shields applied.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Team">
      <summary>
            Gets the team.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.UnitComponentInfo">
      <summary>
            Gets the unit's component information.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Position">
      <summary>
            Gets the current position.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.HealthBarScreenPosition">
      <summary>
            Gets the position of the health on the screen.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.W2S">
      <summary>
            Get the transformed WorldToScreen position.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.WorldToMap">
      <summary>
            Gets the current position in map on screen.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.GetSpellBook">
      <summary>
            Gets the spellbook.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.GetAttackDelay">
      <summary>
            Gets the time delay between basic attacks.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.GetAttackCastDelay">
      <summary>
            Gets the time between cast animation and the actual cast of the basic attack.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.IsCastingSpell">
      <summary>
            Checks whether if it is casting a spell.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.GetCurrentCastingSpell">
      <summary>
            Gets the current casting spell.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.BasicAttackInfo">
      <summary>
            Gets the information about the basic attack.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.EncryptedID">
      <summary>
            Gets the encryped server Object ID.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Index">
      <summary>
            Gets the index within the object manager.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Name">
      <summary>
            Gets the object's name. For player, it is their username.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.NetworkID">
      <summary>
            Gets the ID on the network stream.
            </summary>
    </member>
    <member name="M:Oasys.Common.GameObject.GameObjectBase.DistanceTo(SharpDX.Vector3)">
      <summary>
            Gets the distance between the given vector3 in-game position.
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Mana">
      <summary>
            Gets the mana.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.MaxMana">
      <summary>
            Gets the max mana.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.AttackRange">
      <summary>
            Gets the attack Range in 100th teemos.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.TrueAttackRange">
      <summary>
            Gets the true attack range including bounding radius(hitbox radius) in 100th teemos.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.UnitStats">
      <summary>
            Gets the statistical information about the unit. Statistical values shown next to the champion icon at the bottom.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Gold">
      <summary>
            Gets the amount of gold it has.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Direction">
      <summary>
            Gets the direction it is facing towards/at.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.BuffManager">
      <summary>
            Gets the manager for the buffs.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.CombatType">
      <summary>
            Gets the combat type.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.ModelName">
      <summary>
            Gets the character model name. For champions, it is the champion name.
            </summary>
    </member>
    <member name="P:Oasys.Common.GameObject.GameObjectBase.Level">
      <summary>
            Gets the current level.
            </summary>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetWindowState">
      <summary>
            Gets the game's window state.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetViewProjectionMatrix">
      <summary>
            Gets the game's view projection matrix.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetViewMatrix">
      <summary>
            Gets the game's view matrix.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetProjectionMatrix">
      <summary>
            Gets the game's projection matrix.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetGameScreenResolution">
      <summary>
            Gets the game's screen resolution with scalings applied.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetWindowsScreenResolution">
      <summary>
            Gets the monitor screen resolution with scalings applied.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetWindowsScreenScalingFactor">
      <summary>
            Gets the operating system's scaling factor.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetGameToWindowScreenScalingX">
      <summary>
            Gets the operating system's x scaling applied to the game.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.GetGameToWindowScreenScalingY">
      <summary>
            Gets the operating system's y scaling applied to the game.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Oasys.Common.LeagueNativeRendererManager.IsWindowFocused">
      <summary>
            Checks whether if the game window is focused.
            </summary>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.WorldToScreen(SharpDX.Vector3)">
      <summary>
            Performs world to screen coordinate translation.
            </summary>
      <param name="pos">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.LeagueNativeRendererManager.WorldToScreenSpell(SharpDX.Vector3)">
      <summary>
            Performs world to screen coordinate translation for spell positions that goes beyond the screen resolution.
            </summary>
      <param name="pos">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.GetPrediction(Oasys.Common.GameObject.GameObjectBase,Oasys.Common.Logic.EB.Prediction.Position.PredictionData,System.Boolean)">
      <summary>
            Predict cast position and collision for a specific target.
            </summary>
      <param name="target"> The target to predict.</param>
      <param name="data"> The prediction data.</param>
      <param name="skipCollision"> Skip collision checks.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.GetPredictionAoe(Oasys.Common.GameObject.GameObjectBase[],Oasys.Common.Logic.EB.Prediction.Position.PredictionData)">
      <summary>
            Predicts all the possible positions to hit as many targets as possible from a predifined group of targets.
            </summary>
      <param name="targets"> The targets to predict. If null then the enemy heroes will be chosen instead.</param>
      <param name="data"> The prediction data.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.GetRealPath(Oasys.Common.GameObject.GameObjectBase)">
      <summary>
            Returns the actual path of a unit.
            </summary>
      <param name="unit"> The unit.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.PredictUnitPosition(Oasys.Common.GameObject.GameObjectBase,System.Int32)">
      <summary>
            Predicts the position of a moving unit after a specified amount of time.
            </summary>
      <param name="unit"> The unit.</param>
      <param name="time"> The time in milliseconds.</param>
    </member>
    <member name="T:Oasys.Common.Logic.EB.Prediction.Position.PredictionData">
      <summary>
            Holds all the necessary data needed to perform prediction.
            </summary>
    </member>
    <member name="P:Oasys.Common.Logic.EB.Prediction.Position.PredictionData.Radius">
      <summary>
            Spell Radius / Width
            </summary>
    </member>
    <member name="P:Oasys.Common.Logic.EB.Prediction.Position.PredictionData.Delay">
      <summary>
            The skillshot delay in milliseconds/ticks.
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.PredictionData.#ctor(Oasys.Common.Logic.EB.Prediction.Position.PredictionData.PredictionType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{SharpDX.Vector3})">
      <summary>
            Initializes a new instance of the PredictionData class.
            </summary>
      <param name="type"> The prediction type.</param>
      <param name="range"> The maximum range of the skillshot.</param>
      <param name="radius"> The radius of the skillshot.</param>
      <param name="angle"> The angle in degrees of the skillshot. It is used only in cone spells.</param>
      <param name="delay"> The delay (or cast time) of the skillshot in milliseconds/ticks.</param>
      <param name="speed"> The movement speed of the missile.</param>
      <param name="allowCollisionCount"> The number of collision objects the skillshot can pass through. It is used only in Linear skillshots</param>
      <param name="sourcePosition"> The start position of the skillshot. Player's position is considered the starting point by default.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.PredictionData.#ctor(Oasys.Common.Logic.EB.Prediction.Position.PredictionData.PredictionType,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Nullable{SharpDX.Vector3})">
      <summary>
            Initializes a new instance of the PredictionData class.
            </summary>
      <param name="type"> The prediction type.</param>
      <param name="range"> The maximum range of the skillshot.</param>
      <param name="radius"> The radius of the skillshot.</param>
      <param name="angle"> The angle in degrees of the skillshot. It is used only in cone spells.</param>
      <param name="delay"> The delay (or cast time) of the skillshot in seconds.</param>
      <param name="speed"> The movement speed of the missile.</param>
      <param name="allowCollisionCount"> The number of collision objects the skillshot can pass through. It is used only in Linear skillshots</param>
      <param name="sourcePosition"> The start position of the skillshot. Player's position is considered the starting point by default.</param>
    </member>
    <member name="T:Oasys.Common.Logic.EB.Prediction.Position.Collision">
      <summary>
            Computes collision between objects.
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.Collision.MovingObjectsCollision(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Boolean,SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Boolean)">
      <summary>
            Determines whether two moving objects will collide within a predetermined path. The movement is considered linear.
            </summary>
      <param name="start"> The starting point of the first object.</param>
      <param name="destination"> The destination point of the first object.</param>
      <param name="hitbox"> The hitbox radius of the first object.</param>
      <param name="speed"> The movement speed of the first object.</param>
      <param name="isUnit"> Determines whether the object is a unit. Set to true if the first object disappears after reaching its destination.</param>
      <param name="start2"> The starting point of the second object.</param>
      <param name="destination2"> The destination point of the second object.</param>
      <param name="hitbox2"> The hitbox radius of the second object.</param>
      <param name="speed2"> The movement speed of the second object.</param>
      <param name="isUnit2"> Determines whether the object is a unit. Set to true if the second object disappears after reaching its destination.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.Collision.LinearMissileCollision(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Int32,System.Int32,System.Int32)">
      <summary>
            Determines whether a unit will collide with a linear missile along a predetermined path.
            </summary>
      <param name="unit"> The unit to check collision.</param>
      <param name="missileStartPos"> The starting point of the missile.</param>
      <param name="missileEndPos"> The destination point of the missile.</param>
      <param name="missileSpeed"> Missile's speed.</param>
      <param name="missileWidth"> Missile's width. The width is equal to the double of the missile's hitbox radius.</param>
      <param name="delay"> The time (in milliseconds) it will take for the missile to spawn.</param>
      <param name="extraRadius"> The extra hitbox radius you can assign to the unit. Default value: 0.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.Collision.CircularMissileCollision(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Int32,System.Int32,System.Int32)">
      <summary>
            Determines whether a unit will collide with a circular missile along a predetermined path. Circular missiles cause collision only at the destination point.
            </summary>
      <param name="unit"> The unit to check collision.</param>
      <param name="missileStartPos"> The starting point of the missile.</param>
      <param name="missileEndPos"> The destination point of the missile.</param>
      <param name="missileSpeed"> Missile's speed.</param>
      <param name="missileRadius"> Missile's collision radius.</param>
      <param name="delay"> The time (in milliseconds) it will take for the missile to spawn.</param>
      <param name="extraRadius"> The extra hitbox radius you can assign to the unit. Default value: 0.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.Collision.GetCollisionPoint(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
            Computes the point where an object can collide with another object moving along a predetermined path. There may not always exist a valid point.
            </summary>
      <param name="start"> The starting point of the pretedermined path.</param>
      <param name="end"> The ending point of the predetermined path.</param>
      <param name="position"> The current position of the object.</param>
      <param name="speed"> The movement speed of the object moving along the predetermined path.</param>
      <param name="speed2"> The movement speed of the object.</param>
    </member>
    <member name="M:Oasys.Common.Logic.EB.Prediction.Position.Collision.GetYasuoWallCollision(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
            Returns the point that intersects with Start and End, returns Vector3.Zero if doesn't collide.
            </summary>
      <param name="start"> The start point.</param>
      <param name="end"> The end point.</param>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry">
      <summary>
                Provides methods regarding geometry math.
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.AngleBetween(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the angle with the vector p2 in degrees;
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.CenterOfPolygone(Oasys.Common.Logic.Geometry.Polygon)">
      <summary>
                Returns a Vector2 at center of the polygone.
            </summary>
      <param name="p">The polygon.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.CircleCircleIntersection(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Returns the two intersection points between two circles.
            </summary>
      <param name="center1">The center1.</param>
      <param name="center2">The center2.</param>
      <param name="radius1">The radius1.</param>
      <param name="radius2">The radius2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.ClipPolygons(System.Collections.Generic.List{Oasys.Common.Logic.Geometry.Polygon})">
      <summary>
                Clips the polygons.
            </summary>
      <param name="polygons">The polygons.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Close(System.Single,System.Single,System.Single)">
      <summary>
                Checks if the two floats are close to each other.
            </summary>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <param name="eps">The epsilon.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Closest(SharpDX.Vector2,System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Returns the closest vector from a list.
            </summary>
      <param name="v">The v.</param>
      <param name="vList">The v list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.CrossProduct(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the cross product Z value.
            </summary>
      <param name="self">The self.</param>
      <param name="other">The other.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.DegreeToRadian(System.Double)">
      <summary>
                Converts degrees to radians.
            </summary>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(Oasys.Common.GameObject.GameObjectBase,System.Boolean)">
      <summary>
                Calculates the 2D distance to the unit.
            </summary>
      <param name="anotherUnit">Another unit.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(Oasys.Common.GameObject.GameObjectBase,Oasys.Common.GameObject.GameObjectBase,System.Boolean)">
      <summary>
                Calculates the 2D distance to the unit.
            </summary>
      <param name="unit">The unit.</param>
      <param name="anotherUnit">Another unit.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector3,System.Boolean)">
      <summary>
                Calculates the 2D distance to the point.
            </summary>
      <param name="unit">The unit.</param>
      <param name="point">The point.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(Oasys.Common.GameObject.GameObjectBase,SharpDX.Vector2,System.Boolean)">
      <summary>
                Calculates the 2D distance to the point.
            </summary>
      <param name="unit">The unit.</param>
      <param name="point">The point.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(SharpDX.Vector3,SharpDX.Vector3,System.Boolean)">
      <summary>
                Returns the 2D distance (XY plane) between two vector.
            </summary>
      <param name="v">The v.</param>
      <param name="other">The other.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(SharpDX.Vector2,SharpDX.Vector2,System.Boolean)">
      <summary>
                Calculates the distance to the Vector2.
            </summary>
      <param name="v">The v.</param>
      <param name="to">To.</param>
      <param name="squared">if set to <c>true</c> gets the distance squared.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(SharpDX.Vector2,SharpDX.Vector3,System.Boolean)">
      <summary>
                Calculates the distance to the Vector3.
            </summary>
      <param name="v">The v.</param>
      <param name="to">To.</param>
      <param name="squared">if set to <c>true</c> gets the distance squared.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(SharpDX.Vector2,Oasys.Common.GameObject.GameObjectBase,System.Boolean)">
      <summary>
                Calculates the distance to the unit.
            </summary>
      <param name="v">The v.</param>
      <param name="to">To.</param>
      <param name="squared">if set to <c>true</c> gets the distance squared.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean,System.Boolean)">
      <summary>
                Returns the distance to the line segment.
            </summary>
      <param name="point">The point.</param>
      <param name="segmentStart">The segment start.</param>
      <param name="segmentEnd">The segment end.</param>
      <param name="onlyIfOnSegment">if set to <c>true</c> [only if on segment].</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Distance3D(Oasys.Common.GameObject.GameObjectBase,Oasys.Common.GameObject.GameObjectBase,System.Boolean)">
      <summary>
                Calculates the 3D distance to the unit.
            </summary>
      <param name="unit">The unit.</param>
      <param name="anotherUnit">Another unit.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Intersection(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Intersects two line segments.
            </summary>
      <param name="lineSegment1Start">The line segment1 start.</param>
      <param name="lineSegment1End">The line segment1 end.</param>
      <param name="lineSegment2Start">The line segment2 start.</param>
      <param name="lineSegment2End">The line segment2 end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.JoinPolygons(System.Collections.Generic.List{Oasys.Common.Logic.Geometry.Polygon})">
      <summary>
                Joins all the polygones in the list in one polygone if they interect.
            </summary>
      <param name="sList">The polygon list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.JoinPolygons(System.Collections.Generic.List{Oasys.Common.Logic.Geometry.Polygon},ClipperLib.ClipType,ClipperLib.PolyType,ClipperLib.PolyFillType,ClipperLib.PolyFillType)">
      <summary>
                Joins all the polygones.
                ClipType: http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/ClipType.htm
                PolyFillType: http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm
            </summary>
      <param name="sList">The s list.</param>
      <param name="cType">Type of the c.</param>
      <param name="pType">Type of the p.</param>
      <param name="pFType1">The p f type1.</param>
      <param name="pFType2">The p f type2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.MovePolygone(Oasys.Common.Logic.Geometry.Polygon,SharpDX.Vector2)">
      <summary>
                Moves the polygone to the set position. It dosent rotate the polygone.
            </summary>
      <param name="polygon">The polygon.</param>
      <param name="moveTo">The move to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.PathLength(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Returns the total distance of a path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Perpendicular(SharpDX.Vector2)">
      <summary>
                Returns the perpendicular vector.
            </summary>
      <param name="v">The v.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Perpendicular2(SharpDX.Vector2)">
      <summary>
                Returns the second perpendicular vector.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polar(SharpDX.Vector2)">
      <summary>
                Returns the polar for vector angle (in Degrees).
            </summary>
      <param name="v1">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.PositionAfter(System.Collections.Generic.List{SharpDX.Vector2},System.Int32,System.Int32,System.Int32)">
      <summary>
                Returns the position where the vector will be after t(time) with s(speed) and delay.
            </summary>
      <param name="self">The self.</param>
      <param name="t">The time.</param>
      <param name="s">The speed.</param>
      <param name="delay">The delay.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.ProjectOn(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the projection of the Vector2 on the segment.
            </summary>
      <param name="point">The point.</param>
      <param name="segmentStart">The segment start.</param>
      <param name="segmentEnd">The segment end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.RadianToDegree(System.Double)">
      <summary>
                Converts radians to degrees.
            </summary>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.RotateAroundPoint(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the vector around the set position.
                Angle is in radians.
            </summary>
      <param name="rotated">The rotated.</param>
      <param name="around">The around.</param>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Rotated(SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the vector a set angle (angle in radians).
            </summary>
      <param name="v">The vector.</param>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.RotatePolygon(Oasys.Common.Logic.Geometry.Polygon,SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the polygon around the set position.
                Angle is in radians.
            </summary>
      <param name="polygon">The polygon.</param>
      <param name="around">The around.</param>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.RotatePolygon(Oasys.Common.Logic.Geometry.Polygon,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Rotates the polygon around to the set direction.
            </summary>
      <param name="polygon">The polygon.</param>
      <param name="around">The around.</param>
      <param name="direction">The direction.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.SetHeight(SharpDX.Vector3,System.Nullable{System.Single})">
      <summary>
                Sets the z.
            </summary>
      <param name="v">The v.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Shorten(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Shortens the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to shorten from.</param>
      <param name="distance">The distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Shorten(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Shortens the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to shorten from.</param>
      <param name="distance">The distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.SwitchYZ(SharpDX.Vector3)">
      <summary>
                Switches the Y and Z.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.To2D(SharpDX.Vector3)">
      <summary>
                Converts a Vector3 to Vector2
            </summary>
      <param name="v">The v.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.To2D(System.Collections.Generic.List{SharpDX.Vector3})">
      <summary>
                Converts a 3D path to 2D
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.To3D(SharpDX.Vector2)">
      <summary>
                Converts the Vector2 to Vector3. (Y = Player.ServerPosition.Y)
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.To3DWorld(SharpDX.Vector2)">
      <summary>
                Converts the Vector2 to Vector3. (Z = NavMesh.GetHeightForPosition)
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.ToPolygon(System.Collections.Generic.List{ClipperLib.IntPoint})">
      <summary>
                Converts a list of <see cref="T:ClipperLib.IntPoint" /> to a polygon.
            </summary>
      <param name="v">The int points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.ToPolygons(System.Collections.Generic.List{System.Collections.Generic.List{ClipperLib.IntPoint}})">
      <summary>
                Converts a list of list points to a polygon.
            </summary>
      <param name="v">The v.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.VectorMovementCollision(SharpDX.Vector2,SharpDX.Vector2,System.Single,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Gets the vectors movement collision.
            </summary>
      <param name="startPoint1">The start point1.</param>
      <param name="endPoint1">The end point1.</param>
      <param name="v1">The v1.</param>
      <param name="startPoint2">The start point2.</param>
      <param name="v2">The v2.</param>
      <param name="delay">The delay.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.IntersectionResult">
      <summary>
                Represents an intersection result.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.IntersectionResult.Intersects">
      <summary>
                If they intersect.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.IntersectionResult.Point">
      <summary>
                The point
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.IntersectionResult.#ctor(System.Boolean,SharpDX.Vector2)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.IntersectionResult" /> struct.
            </summary>
      <param name="Intersects">if set to <c>true</c>, they insersect.</param>
      <param name="Point">The point.</param>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.ProjectionInfo">
      <summary>
                Represents the projection information.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.ProjectionInfo.IsOnSegment">
      <summary>
                The is on segment
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.ProjectionInfo.LinePoint">
      <summary>
                The line point
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.ProjectionInfo.SegmentPoint">
      <summary>
                The segment point
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.ProjectionInfo.#ctor(System.Boolean,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.ProjectionInfo" /> struct.
            </summary>
      <param name="isOnSegment">if set to <c>true</c> [is on segment].</param>
      <param name="segmentPoint">The segment point.</param>
      <param name="linePoint">The line point.</param>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.Polygon">
      <summary>
                Represents a polygon.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Points">
      <summary>
                The points
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Add(SharpDX.Vector2)">
      <summary>
                Adds the specified point.
            </summary>
      <param name="point">The point.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Add(SharpDX.Vector3)">
      <summary>
                Adds the specified point.
            </summary>
      <param name="point">The point.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Add(Oasys.Common.Logic.Geometry.Polygon)">
      <summary>
                Adds the specified polygon.
            </summary>
      <param name="polygon">The polygon.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Draw(SharpDX.Color,System.Int32)">
      <summary>
                Draws the polygon.
            </summary>
      <param name="color">The color.</param>
      <param name="width">The width.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.IsInside(SharpDX.Vector2)">
      <summary>
                Determines whether the specified point is inside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.IsInside(SharpDX.Vector3)">
      <summary>
                Determines whether the specified point is inside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.IsInside(Oasys.Common.GameObject.GameObjectBase)">
      <summary>
                Determines whether the specified point is inside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.IsOutside(SharpDX.Vector2)">
      <summary>
                Determines whether the specified point is outside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.ToClipperPath">
      <summary>
                Converts this instance to a clipper path.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.Polygon.Arc">
      <summary>
                Represnets an arc polygon.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Arc.Angle">
      <summary>
                The angle
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Arc.EndPos">
      <summary>
                The end position
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Arc.Radius">
      <summary>
                The radius
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Arc.StartPos">
      <summary>
                The start position
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Arc.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Arc" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Arc.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Arc" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Arc.UpdatePolygon(System.Int32)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.Polygon.Circle">
      <summary>
                Represents a circle polygon.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Circle.Center">
      <summary>
                The center
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Circle.Radius">
      <summary>
                The radius
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Circle.#ctor(SharpDX.Vector3,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Circle" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Circle.#ctor(SharpDX.Vector2,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Circle" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Circle.UpdatePolygon(System.Int32,System.Single)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
      <param name="overrideWidth">Width of the override.</param>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.Polygon.Line">
      <summary>
                Represents a line polygon.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Line.LineEnd">
      <summary>
                The line end
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Line.LineStart">
      <summary>
                The line start
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Line.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Line" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="length">The length.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Line.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Line" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="length">The length.</param>
    </member>
    <member name="P:Oasys.Common.Logic.Geometry.Polygon.Line.Length">
      <summary>
                Gets or sets the length.
            </summary>
      <value>
                The length.
            </value>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Line.UpdatePolygon">
      <summary>
                Updates the polygon.
            </summary>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.Polygon.Rectangle">
      <summary>
                Represents a rectangle polygon.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Rectangle.End">
      <summary>
                The end
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Rectangle.Start">
      <summary>
                The start
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Rectangle.Width">
      <summary>
                The width
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Rectangle.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Rectangle" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="width">The width.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Rectangle.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Rectangle" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="width">The width.</param>
    </member>
    <member name="P:Oasys.Common.Logic.Geometry.Polygon.Rectangle.Direction">
      <summary>
                Gets the direction.
            </summary>
      <value>
                The direction.
            </value>
    </member>
    <member name="P:Oasys.Common.Logic.Geometry.Polygon.Rectangle.Perpendicular">
      <summary>
                Gets the perpendicular.
            </summary>
      <value>
                The perpendicular.
            </value>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Rectangle.UpdatePolygon(System.Int32,System.Single)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
      <param name="overrideWidth">Width of the override.</param>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.Polygon.Ring">
      <summary>
                Represents a ring polygon.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Ring.Center">
      <summary>
                The center
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Ring.InnerRadius">
      <summary>
                The inner radius
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Ring.OuterRadius">
      <summary>
                The outer radius
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Ring.#ctor(SharpDX.Vector3,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Ring" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="innerRadius">The inner radius.</param>
      <param name="outerRadius">The outer radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Ring.#ctor(SharpDX.Vector2,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Ring" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="innerRadius">The inner radius.</param>
      <param name="outerRadius">The outer radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Ring.UpdatePolygon(System.Int32)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="T:Oasys.Common.Logic.Geometry.Polygon.Sector">
      <summary>
                Represnets a sector polygon.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Sector.Angle">
      <summary>
                The angle
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Sector.Center">
      <summary>
                The center
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Sector.Direction">
      <summary>
                The direction
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.Geometry.Polygon.Sector.Radius">
      <summary>
                The radius
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Sector.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Sector" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Sector.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.Geometry.Polygon.Sector" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Sector.RotateLineFromPoint(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Boolean)">
      <summary>
                Rotates Line by angle/radian
            </summary>
      <param name="point1">
      </param>
      <param name="point2">
      </param>
      <param name="value">
      </param>
      <param name="radian">True for radian values, false for degree</param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Logic.Geometry.Polygon.Sector.UpdatePolygon(System.Int32)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="T:Oasys.Common.Logic.LS.HitChance">
      <summary>
                Represents the chance of hitting an enemy.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.Immobile">
      <summary>
                The target is immobile.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.Dashing">
      <summary>
                The unit is dashing.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.VeryHigh">
      <summary>
                Very high probability of hitting the target.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.High">
      <summary>
                High probability of hitting the target.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.Medium">
      <summary>
                Medium probability of hitting the target.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.Low">
      <summary>
                Low probability of hitting the target.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.Impossible">
      <summary>
                Impossible to hit the target.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.HitChance.OutOfRange">
      <summary>
                The target is out of range.
            </summary>
    </member>
    <member name="T:Oasys.Common.Logic.LS.SkillshotType">
      <summary>
                The type of skillshot.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.SkillshotType.SkillshotLine">
      <summary>
                The skillshot is linear.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.SkillshotType.SkillshotCircle">
      <summary>
                The skillshot is circular.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.SkillshotType.SkillshotCone">
      <summary>
                The skillshot is conical.
            </summary>
    </member>
    <member name="T:Oasys.Common.Logic.LS.CollisionableObjects">
      <summary>
                Objects that cause collision to the spell.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.CollisionableObjects.Minions">
      <summary>
                Minions.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.CollisionableObjects.Heroes">
      <summary>
                Enemy heroes.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.CollisionableObjects.YasuoWall">
      <summary>
                Yasuo's Wind Wall (W)
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.CollisionableObjects.Walls">
      <summary>
                Walls.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.CollisionableObjects.Allies">
      <summary>
                Ally heroes.
            </summary>
    </member>
    <member name="T:Oasys.Common.Logic.LS.PredictionInput">
      <summary>
                Contains information necessary to calculate the prediction.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Aoe">
      <summary>
                If set to <c>true</c> the prediction will hit as many enemy heroes as posible.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Collision">
      <summary>
        <c>true</c> if the spell collides with units.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.CollisionObjects">
      <summary>
                Array that contains the unit types that the skillshot can collide with.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Delay">
      <summary>
                The skillshot delay in seconds.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Radius">
      <summary>
                The skillshot width's radius or the angle in case of the cone skillshots.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Range">
      <summary>
                The skillshot range in units.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Speed">
      <summary>
                The skillshot speed in units per second.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Type">
      <summary>
                The skillshot type.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.Unit">
      <summary>
                The unit that the prediction will made for.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionInput.UseBoundingRadius">
      <summary>
                Set to true to increase the prediction radius by the unit bounding radius.
            </summary>
    </member>
    <member name="P:Oasys.Common.Logic.LS.PredictionInput.From">
      <summary>
                The position from where the skillshot missile gets fired.
            </summary>
      <value>From.</value>
    </member>
    <member name="P:Oasys.Common.Logic.LS.PredictionInput.RangeCheckFrom">
      <summary>
                The position from where the range is checked.
            </summary>
      <value>The range check from.</value>
    </member>
    <member name="T:Oasys.Common.Logic.LS.PredictionOutput">
      <summary>
                The output after calculating the prediction.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionOutput.AoeTargetsHit">
      <summary>
                The list of the targets that the spell will hit (only if aoe was enabled).
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionOutput.CollisionObjects">
      <summary>
                The list of the units that the skillshot will collide with.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionOutput.Hitchance">
      <summary>
                Returns the hitchance.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.LS.PredictionOutput.Input">
      <summary>
                The input
            </summary>
    </member>
    <member name="P:Oasys.Common.Logic.LS.PredictionOutput.AoeTargetsHitCount">
      <summary>
                The number of targets the skillshot will hit (only if aoe was enabled).
            </summary>
      <value>The aoe targets hit count.</value>
    </member>
    <member name="P:Oasys.Common.Logic.LS.PredictionOutput.CastPosition">
      <summary>
                The position where the skillshot should be casted to increase the accuracy.
            </summary>
      <value>The cast position.</value>
    </member>
    <member name="P:Oasys.Common.Logic.LS.PredictionOutput.UnitPosition">
      <summary>
                The position where the unit is going to be when the skillshot reaches his position.
            </summary>
      <value>The unit position.</value>
    </member>
    <member name="T:Oasys.Common.Logic.LS.Prediction">
      <summary>
                Class used for calculating the position of the given unit after a delay.
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.LS.Prediction.GetPrediction(Oasys.Common.GameObject.GameObjectBase,System.Single)">
      <summary>
                Gets the prediction.
            </summary>
      <param name="unit">The unit.</param>
      <param name="delay">The delay.</param>
      <returns>PredictionOutput.</returns>
    </member>
    <member name="M:Oasys.Common.Logic.LS.Prediction.GetPrediction(Oasys.Common.GameObject.GameObjectBase,System.Single,System.Single)">
      <summary>
                Gets the prediction.
            </summary>
      <param name="unit">The unit.</param>
      <param name="delay">The delay.</param>
      <param name="radius">The radius.</param>
      <returns>PredictionOutput.</returns>
    </member>
    <member name="M:Oasys.Common.Logic.LS.Prediction.GetPrediction(Oasys.Common.GameObject.GameObjectBase,System.Single,System.Single,System.Single)">
      <summary>
                Gets the prediction.
            </summary>
      <param name="unit">The unit.</param>
      <param name="delay">The delay.</param>
      <param name="radius">The radius.</param>
      <param name="speed">The speed.</param>
      <returns>PredictionOutput.</returns>
    </member>
    <member name="M:Oasys.Common.Logic.LS.Prediction.GetPrediction(Oasys.Common.GameObject.GameObjectBase,System.Single,System.Single,System.Single,Oasys.Common.Logic.LS.CollisionableObjects[])">
      <summary>
                Gets the prediction.
            </summary>
      <param name="unit">The unit.</param>
      <param name="delay">The delay.</param>
      <param name="radius">The radius.</param>
      <param name="speed">The speed.</param>
      <param name="collisionable">The collisionable objects.</param>
      <returns>PredictionOutput.</returns>
    </member>
    <member name="M:Oasys.Common.Logic.LS.Prediction.GetPrediction(Oasys.Common.Logic.LS.PredictionInput)">
      <summary>
                Gets the prediction.
            </summary>
      <param name="input">The input.</param>
      <returns>PredictionOutput.</returns>
    </member>
    <member name="T:Oasys.Common.Logic.LS.Collision">
      <summary>
                Class that helps in calculating collision.
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.LS.Collision.GetCollision(System.Collections.Generic.List{SharpDX.Vector3},Oasys.Common.Logic.LS.PredictionInput)">
      <summary>
                Returns the list of the units that the skillshot will hit before reaching the set positions.
            </summary>
      <param name="positions">The positions.</param>
      <param name="input">The input.</param>
      <returns>List&lt;Obj_AI_Base&gt;.</returns>
    </member>
    <member name="T:Oasys.Common.Logic.MEC">
      <summary>
                Provides method to calculate the minimum enclosing circle.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.MEC.g_MinMaxBox">
      <summary>
                The minimum maximum box
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.MEC.g_MinMaxCorners">
      <summary>
                The minimum maximum corners
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.MEC.g_NonCulledPoints">
      <summary>
                The non culled points
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.MEC.FindMinimalBoundingCircle(System.Collections.Generic.List{SharpDX.Vector2},SharpDX.Vector2@,System.Single@)">
      <summary>
                Finds the minimal bounding circle.
            </summary>
      <param name="points">The points.</param>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Oasys.Common.Logic.MEC.GetMec(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Returns the mininimum enclosing circle from a list of points.
            </summary>
      <param name="points">The points.</param>
      <returns>MecCircle.</returns>
    </member>
    <member name="M:Oasys.Common.Logic.MEC.MakeConvexHull(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Makes the convex hull.
            </summary>
      <param name="points">The points.</param>
      <returns>Points that make up a polygon's convex hull..</returns>
    </member>
    <member name="T:Oasys.Common.Logic.MEC.MecCircle">
      <summary>
                Represetns a MecCircle
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.MEC.MecCircle.Center">
      <summary>
                The center
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.MEC.MecCircle.Radius">
      <summary>
                The radius
            </summary>
    </member>
    <member name="M:Oasys.Common.Logic.MEC.MecCircle.#ctor(SharpDX.Vector2,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Oasys.Common.Logic.MEC.MecCircle" /> struct.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.LastHit">
      <summary>
                The orbwalker will only last hit minions.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.Mixed">
      <summary>
                The orbwalker will alternate between last hitting and auto attacking champions.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.LaneClear">
      <summary>
                The orbwalker will clear the lane of minions as fast as possible while attempting to get the last hit. But also targetting champions, monsters, turrrets, etc...
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.Combo">
      <summary>
                The orbwalker will only attack champions.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.Freeze">
      <summary>
                The orbwalker will only last hit minions as late as possible.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.Move">
      <summary>
                The orbwalker will only move.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.None">
      <summary>
                The orbwalker does nothing.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.Evade">
      <summary>
                The orbwalker will not attack while evading.
            </summary>
    </member>
    <member name="F:Oasys.Common.Logic.OrbwalkingMode.Support">
      <summary>
                The orbwalker will clear the lane of minions as fast as possible while attempting to not get the last hit. But also targetting champions, monsters, turrrets, etc...
            </summary>
    </member>
    <member name="M:Oasys.Common.Menu.Group.AddItem(Oasys.Common.Menu.TabItem)">
      <summary>
            Adds the item in the tab.
            </summary>
      <param name="tbItm">
      </param>
      <returns>Index of added item</returns>
      <example>
        <code>
                      var tab1 = MenuManager.GetTab("Tab1");
                      tab1.AddItem(new Switch() {Title = "Item1"});
               </code>
      </example>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Oasys.Common.Menu.Group.GetItem``1(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Oasys.Common.Menu.Group.GetItem``1(System.Func{``0,System.Boolean})" -->
    <!-- Badly formed XML comment ignored for member "M:Oasys.Common.Menu.Group.GetItem``1(System.Int32)" -->
    <member name="T:Oasys.Common.Menu.ItemComponents.Counter">
      <summary>
            Controls and sets a value.
            </summary>
    </member>
    <member name="T:Oasys.Common.Menu.ItemComponents.FloatCounter">
      <summary>
            Controls and sets a value.
            </summary>
    </member>
    <member name="T:Oasys.Common.Menu.ItemComponents.InfoDisplay">
      <summary>
            Displays the set information.
            </summary>
    </member>
    <member name="T:Oasys.Common.Menu.ItemComponents.ModeDisplay">
      <summary>
            Displays and controls a set of modes.
            </summary>
    </member>
    <member name="T:Oasys.Common.Menu.ItemComponents.Switch">
      <summary>
            A On/Off switch.
            </summary>
    </member>
    <member name="M:Oasys.Common.Menu.Tab.AddGroup(Oasys.Common.Menu.Group)">
      <summary>
            Adds the group in the tab.
            </summary>
      <param name="group">
      </param>
      <returns>Index of added group</returns>
      <example>
        <code>
                      var tab1 = MenuManager.GetTab("Tab1");
                      tab1.AddGroup(new Group() {Title = "Group1"});
               </code>
      </example>
    </member>
    <member name="M:Oasys.Common.Menu.Tab.GetGroup(System.String)">
      <summary>
            Gets a group by the name in the tab.
            </summary>
      <param name="groupName">
      </param>
      <returns>Requested group</returns>
      <example>
        <code>
                       var tab1 = MenuManager.GetTab("Tab1");
                       tab1.GetGroup("Group1");
               </code>
      </example>
    </member>
    <member name="M:Oasys.Common.Menu.Tab.GetGroup(System.Func{Oasys.Common.Menu.Group,System.Boolean})">
      <summary>
            Gets an item by a predicate.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="predicate">
      </param>
      <returns>Requested group</returns>
      <example>
        <code>
                       var tab1 = MenuManager.GetTab("Tab1");
                       tab1.GetGroup(x =&gt; x.Title == "Group1");
               </code>
      </example>
    </member>
    <member name="M:Oasys.Common.Menu.Tab.GetGroup(System.Int32)">
      <summary>
            Gets a group by its index.
            </summary>
      <param name="index">
      </param>
      <returns>Requested group</returns>
      <example>
        <code>
                       var tab1 = MenuManager.GetTab(1);
                       tab1.GetGroup(1);
               </code>
      </example>
    </member>
    <member name="M:Oasys.Common.Menu.Tab.AddItem(Oasys.Common.Menu.TabItem)">
      <summary>
            Adds the item in the tab.
            </summary>
      <param name="tbItm">
      </param>
      <returns>Index of added item</returns>
      <example>
        <code>
                      var tab1 = MenuManager.GetTab("Tab1");
                      tab1.AddItem(new Switch() {Title = "Item1"});
               </code>
      </example>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Oasys.Common.Menu.Tab.GetItem``1(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Oasys.Common.Menu.Tab.GetItem``1(System.Func{``0,System.Boolean})" -->
    <!-- Badly formed XML comment ignored for member "M:Oasys.Common.Menu.Tab.GetItem``1(System.Int32)" -->
    <member name="M:Oasys.Common.Tools.Devices.Keyboard.IsKeyPressed(System.Windows.Forms.Keys)">
      <summary>
            Using async key state
            </summary>
      <param name="keys">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Tools.Devices.Keyboard.GetKeyState(System.Windows.Forms.Keys)">
      <summary>
            Using keyboard event.
            </summary>
      <param name="keys">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Oasys.Common.Tools.Devices.Keyboard.IsPressed(System.Windows.Forms.Keys)">
      <summary>
            Using keyboard event.
            </summary>
      <param name="keys">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LBUTTON">
      <summary>
            Left mouse button
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.RBUTTON">
      <summary>
            Right mouse button
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.CANCEL">
      <summary>
            Control-break processing
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MBUTTON">
      <summary>
            Middle mouse button (three-button mouse)
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.XBUTTON1">
      <summary>
            Windows 2000/XP: X1 mouse button
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.XBUTTON2">
      <summary>
            Windows 2000/XP: X2 mouse button
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BACK">
      <summary>
            BACKSPACE key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.TAB">
      <summary>
            TAB key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.CLEAR">
      <summary>
            CLEAR key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.RETURN">
      <summary>
            ENTER key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SHIFT">
      <summary>
            SHIFT key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.CONTROL">
      <summary>
            CTRL key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MENU">
      <summary>
            ALT key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.PAUSE">
      <summary>
            PAUSE key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.CAPITAL">
      <summary>
            CAPS LOCK key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KANA">
      <summary>
            Input Method Editor (IME) Kana mode
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.HANGUL">
      <summary>
            IME Hangul mode
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.JUNJA">
      <summary>
            IME Junja mode
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.FINAL">
      <summary>
            IME final mode
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.HANJA">
      <summary>
            IME Hanja mode
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KANJI">
      <summary>
            IME Kanji mode
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.ESCAPE">
      <summary>
            ESC key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.CONVERT">
      <summary>
            IME convert
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NONCONVERT">
      <summary>
            IME nonconvert
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.ACCEPT">
      <summary>
            IME accept
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MODECHANGE">
      <summary>
            IME mode change request
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SPACE">
      <summary>
            SPACEBAR
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.PRIOR">
      <summary>
            PAGE UP key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NEXT">
      <summary>
            PAGE DOWN key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.END">
      <summary>
            END key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.HOME">
      <summary>
            HOME key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LEFT">
      <summary>
            LEFT ARROW key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.UP">
      <summary>
            UP ARROW key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.RIGHT">
      <summary>
            RIGHT ARROW key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.DOWN">
      <summary>
            DOWN ARROW key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SELECT">
      <summary>
            SELECT key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.PRINT">
      <summary>
            PRINT key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.EXECUTE">
      <summary>
            EXECUTE key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SNAPSHOT">
      <summary>
            PRINT SCREEN key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.INSERT">
      <summary>
            INS key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.DELETE">
      <summary>
            DEL key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.HELP">
      <summary>
            HELP key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_0">
      <summary>
            0 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_1">
      <summary>
            1 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_2">
      <summary>
            2 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_3">
      <summary>
            3 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_4">
      <summary>
            4 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_5">
      <summary>
            5 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_6">
      <summary>
            6 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_7">
      <summary>
            7 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_8">
      <summary>
            8 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_9">
      <summary>
            9 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_A">
      <summary>
            A key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_B">
      <summary>
            B key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_C">
      <summary>
            C key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_D">
      <summary>
            D key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_E">
      <summary>
            E key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_F">
      <summary>
            F key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_G">
      <summary>
            G key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_H">
      <summary>
            H key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_I">
      <summary>
            I key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_J">
      <summary>
            J key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_K">
      <summary>
            K key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_L">
      <summary>
            L key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_M">
      <summary>
            M key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_N">
      <summary>
            N key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_O">
      <summary>
            O key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_P">
      <summary>
            P key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_Q">
      <summary>
            Q key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_R">
      <summary>
            R key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_S">
      <summary>
            S key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_T">
      <summary>
            T key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_U">
      <summary>
            U key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_V">
      <summary>
            V key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_W">
      <summary>
            W key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_X">
      <summary>
            X key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_Y">
      <summary>
            Y key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.KEY_Z">
      <summary>
            Z key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LWIN">
      <summary>
            Left Windows key (Microsoft Natural keyboard) 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.RWIN">
      <summary>
            Right Windows key (Natural keyboard)
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.APPS">
      <summary>
            Applications key (Natural keyboard)
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SLEEP">
      <summary>
            Computer Sleep key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD0">
      <summary>
            Numeric keypad 0 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD1">
      <summary>
            Numeric keypad 1 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD2">
      <summary>
            Numeric keypad 2 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD3">
      <summary>
            Numeric keypad 3 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD4">
      <summary>
            Numeric keypad 4 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD5">
      <summary>
            Numeric keypad 5 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD6">
      <summary>
            Numeric keypad 6 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD7">
      <summary>
            Numeric keypad 7 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD8">
      <summary>
            Numeric keypad 8 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMPAD9">
      <summary>
            Numeric keypad 9 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MULTIPLY">
      <summary>
            Multiply key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.ADD">
      <summary>
            Add key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SEPARATOR">
      <summary>
            Separator key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SUBTRACT">
      <summary>
            Subtract key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.DECIMAL">
      <summary>
            Decimal key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.DIVIDE">
      <summary>
            Divide key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F1">
      <summary>
            F1 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F2">
      <summary>
            F2 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F3">
      <summary>
            F3 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F4">
      <summary>
            F4 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F5">
      <summary>
            F5 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F6">
      <summary>
            F6 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F7">
      <summary>
            F7 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F8">
      <summary>
            F8 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F9">
      <summary>
            F9 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F10">
      <summary>
            F10 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F11">
      <summary>
            F11 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F12">
      <summary>
            F12 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F13">
      <summary>
            F13 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F14">
      <summary>
            F14 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F15">
      <summary>
            F15 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F16">
      <summary>
            F16 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F17">
      <summary>
            F17 key  
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F18">
      <summary>
            F18 key  
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F19">
      <summary>
            F19 key  
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F20">
      <summary>
            F20 key  
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F21">
      <summary>
            F21 key  
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F22">
      <summary>
            F22 key, (PPC only) Key used to lock device.
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F23">
      <summary>
            F23 key  
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.F24">
      <summary>
            F24 key  
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NUMLOCK">
      <summary>
            NUM LOCK key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.SCROLL">
      <summary>
            SCROLL LOCK key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LSHIFT">
      <summary>
            Left SHIFT key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.RSHIFT">
      <summary>
            Right SHIFT key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LCONTROL">
      <summary>
            Left CONTROL key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.RCONTROL">
      <summary>
            Right CONTROL key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LMENU">
      <summary>
            Left MENU key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.RMENU">
      <summary>
            Right MENU key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BROWSER_BACK">
      <summary>
            Windows 2000/XP: Browser Back key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BROWSER_FORWARD">
      <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BROWSER_REFRESH">
      <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BROWSER_STOP">
      <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BROWSER_SEARCH">
      <summary>
            Windows 2000/XP: Browser Search key 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BROWSER_FAVORITES">
      <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.BROWSER_HOME">
      <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.VOLUME_MUTE">
      <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.VOLUME_DOWN">
      <summary>
            Windows 2000/XP: Volume Down key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.VOLUME_UP">
      <summary>
            Windows 2000/XP: Volume Up key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MEDIA_NEXT_TRACK">
      <summary>
            Windows 2000/XP: Next Track key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MEDIA_PREV_TRACK">
      <summary>
            Windows 2000/XP: Previous Track key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MEDIA_STOP">
      <summary>
            Windows 2000/XP: Stop Media key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.MEDIA_PLAY_PAUSE">
      <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LAUNCH_MAIL">
      <summary>
            Windows 2000/XP: Start Mail key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LAUNCH_MEDIA_SELECT">
      <summary>
            Windows 2000/XP: Select Media key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LAUNCH_APP1">
      <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.LAUNCH_APP2">
      <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_1">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_PLUS">
      <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_COMMA">
      <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_MINUS">
      <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_PERIOD">
      <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_2">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_3">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_4">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_5">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_6">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_7">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_8">
      <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_102">
      <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.PROCESSKEY">
      <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.PACKET">
      <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.ATTN">
      <summary>
            Attn key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.CRSEL">
      <summary>
            CrSel key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.EXSEL">
      <summary>
            ExSel key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.EREOF">
      <summary>
            Erase EOF key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.PLAY">
      <summary>
            Play key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.ZOOM">
      <summary>
            Zoom key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.NONAME">
      <summary>
            Reserved 
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.PA1">
      <summary>
            PA1 key
            </summary>
    </member>
    <member name="F:Oasys.Common.Tools.Devices.Keyboard.VirtualKeyCodes.OEM_CLEAR">
      <summary>
            Clear key
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:Oasys.Common.Tools.Devices.Keyboard.KeyBoardScanCodes" -->
    <member name="M:Oasys.Common.Tools.Devices.Mouse.SetCursor(System.Int32,System.Int32)">
      <summary>
            Sets the cursor position.
            Note that using SetCursor over SetPosition will not send any input stream events that we might want for certain scenarios.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Oasys.Common.Tools.Devices.Mouse.SetCursorRelative(System.Int32,System.Int32)">
      <summary>
            Changes the cursor position relatively to its current position.
            Note that using SetCursor over SetPosition will not send any input stream events that we might want for certain scenarios.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Oasys.Common.Tools.Devices.Mouse.SetPosition(System.Int32,System.Int32)">
      <summary>
            Sets the mouse position using the native mouse_event call.
            This will also stream all information of mouse movement into the input handler.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Oasys.Common.Tools.Devices.Mouse.SetPositionRelative(System.Int32,System.Int32)">
      <summary>
            Changes the mouse position relatively to its current position using the native mouse_event call.
            This will also stream all information of mouse movement into the input handler.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Oasys.Common.Tools.Devices.Mouse.ClickAndBounce(System.Int32,System.Int32,System.Int32,System.Boolean,System.Action)">
      <summary>
            Clicks on target position, and after [delay]ms bounces back to origin location.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="delay">
      </param>
      <param name="callback">what to do instead of a right click in case we need a key press or something</param>
      <returns>has clicked</returns>
    </member>
    <member name="T:Oasys.Common.Tools.Storage`2">
      <summary>
            Dictionary wrapper for better workflow
            </summary>
      <typeparam name="K">
      </typeparam>
      <typeparam name="T">
      </typeparam>
    </member>
  </members>
</doc>